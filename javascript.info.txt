1. An Introduction to JavaScript

> What is JavaScript?
    JavaScript are usually run in the browser, by JavaScript engines.
    Different JS engines codenames:
        - V8: Chrome, Opera, Edge
        - SpiderMonkey: Firefox
        - "Chakra" for IE, "JavaScriptCore", "Nitro" and "SquirrelFish" for Safari, etc.

    Today, JS can execute not only in the browser, but also on the server.

> What can in-browser JS do?
    Modern JS is a safe programming language.
    It does not provide low-level access to memery or the CPU.

    JS's capability greatly depend on the environment it's running in.
    For instance, Node.js supports functions that allow JS to read/write arbitrary files,
    perform network requests etc.
    (which are tasks to be done by communicating with the server)

    in-browser JS can do:
        - Add new HTML to the page, change the existing content, modify styles.
        - React to user actions, run on mouse clicks, pointer movements, key presses.
        - Send requests over the network to remote servers, download and upload files (AJAX, COMET)
        - Get and set cookies, ask questions to the visitor, show messages.
        - Remember the data on teh client-side ("local storage").

    in-browser JS cannot do:
        - JS on a webpage may not read/write files on the hard disk, no direct access to OS functions.
        - Different tabs/windows generally do not know about each other

2. Variables

    > variables are declared with 'let' statement.
        let message = "Hello";
    
    > declaring twice triggers an error.
        let message = "Hello";
        let message = "World";
        # SyntaxError: 'message' has already been declared

    > There are two limitations on variable names in JS:
        1. The name must contain only letters, digits, or the symbol $ and _.
        2. The first character must not be a digit.

    > constants are declared with 'const' statement.
        const birthday = "22.12.1997";

    > constants cannot be reassigned.
        birthday = "01.01.2000"
        # error, can't reassign the constant!

3. Data Types

    > JavaScript is dynamically typed.
        let message = "hello";  # string
        message = 123;          # number

    <Number>
    > number type represents both integer and float.
    > some special numeric values: Infinity, -Infinity and NaN.
        alert(1/0);         # Infinity
        alert(Infinity);    # Infinity
    > NaN represents a computational error. It is a result of an incorrect or an undefined operation.
        alert("asdf"/2);    # NaN, such division is erroneous
        alert(NaN+1);       # NaN

    <BigInt>
    > JS number type cannot safely represent integer values larger than
        ((2^53)-1) or smaller than -((2^53)-1).
    > A BigInt type was introduced relatively recently to represent longer integers.
    > A BigInt value is created by appending n to the end of an integer
        const bigInt = 123214214214214329953928493753295893285n;

    <String>
    > Strings in JS must be surrounded by quotes.
        let str = "Hello";
        let str2 = 'Yerrr';

    > Double quotes(") and Single quotes(') are used for normal strings.
    > Backticks(`) are extended functionality quotes. eg. embedding variables
        let name = "John";
        alert(`My name is ${name}!`); # My name is John
        alert(`the result is ${1+1}`); # the result is 2

    <Boolean>
    > Boolean values can come as a result of comparisons
        let isGreater = 4 > 1;
        alert(isGreater); # true

    <null>
    > null value does not belong to any of the types above.
    > In JS, null is a special value which represents "nothing", or "empty"

    <undefined>
    > undefined is also a type of its own, just like null.
    > the meaning of undefined is "value is not assigned".
        let age;
        alert(age); # shows "undefined"
    
    <typeof>
    > typeof operator returns the type of the operand.
        typeof undefinted   # "undefined"
        typeof 0            # "number"
        typeof 10n          # "BigInt"
        typeof true         # "boolean"
        typeof "asdf"       # "string"

4. Interaction: alert, prompt, confirm

    > alert shows a message and waits for the user to press OK.
        alert(text);

    > prompt accepts two arguments: title and default value for the input
        prompt(title, [default]); # square bracket around a argument denotes that it is optional.

        1. title is the text to show the user.
        2. default is an optional parameter which is a default value of the input.

        let name = prompt("What is your name?", "Your Name")

    > confirm shows a modal window with a question and two buttons: OK and Cancel.
        The result is true if OK is pressed, and false otherwise.

        let over18 = confirm("Are you over 18?")

5. Type Conversions

    > String conversion
        String(value) will convert value to a string.
        
        let value = true;
        alert(typeof value); # boolean

        value = String(value);
        alert(typeof value); # string

    > Numeric conversion
        Numeric conversion in mathematical functions and expressions happens automatically.
        e.g. alert("6"/"2"); # 3, strings are converted to numbers automatically.

        Number(value) will convert value to a number.
        
        let str = "123";
        alert(typeof str); # string

        let num = Number(str);
        alert(typeof num); # number

        If the string is not a valid number, the result of such conversion is NaN.

        let num = Number("asdf");
        alert(num); # NaN, conversion failed

        Numeric conversion rules:
            undefined       NaN
            null            0
            true and false  1 and 0
            string          whitespaces from start and end are removed. If the remaining string is empty, it returns 0. An error gives NaN.

    > Boolean conversion
        Boolean(1); # true
        Boolean(0); # false

        Boolean("asdf"); # true
        Boolean(""); # false

6. Basic operations

    > Remainder %
        The result of a % b is the remainder of the integer division of a by b.

        alert(5 % 2); # 1
        alert(8 % 3); # 2

    > Exponentiation **
        a ** b = a to the power of be

        alert(2 ** 2); # 4
        alert(2 ** 3); # 8


    
