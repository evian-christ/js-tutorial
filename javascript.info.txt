1. An Introduction to JavaScript

> What is JavaScript?
    JavaScript are usually run in the browser, by JavaScript engines.
    Different JS engines codenames:
        - V8: Chrome, Opera, Edge
        - SpiderMonkey: Firefox
        - "Chakra" for IE, "JavaScriptCore", "Nitro" and "SquirrelFish" for Safari, etc.

    Today, JS can execute not only in the browser, but also on the server.

> What can in-browser JS do?
    Modern JS is a safe programming language.
    It does not provide low-level access to memery or the CPU.

    JS's capability greatly depend on the environment it's running in.
    For instance, Node.js supports functions that allow JS to read/write arbitrary files,
    perform network requests etc.
    (which are tasks to be done by communicating with the server)

    in-browser JS can do:
        - Add new HTML to the page, change the existing content, modify styles.
        - React to user actions, run on mouse clicks, pointer movements, key presses.
        - Send requests over the network to remote servers, download and upload files (AJAX, COMET)
        - Get and set cookies, ask questions to the visitor, show messages.
        - Remember the data on teh client-side ("local storage").

    in-browser JS cannot do:
        - JS on a webpage may not read/write files on the hard disk, no direct access to OS functions.
        - Different tabs/windows generally do not know about each other

2. Variables

    > variables are declared with 'let' statement.
        let message = "Hello";
    
    > declaring twice triggers an error.
        let message = "Hello";
        let message = "World";
        # SyntaxError: 'message' has already been declared

    > There are two limitations on variable names in JS:
        1. The name must contain only letters, digits, or the symbol $ and _.
        2. The first character must not be a digit.

    > constants are declared with 'const' statement.
        const birthday = "22.12.1997";

    > constants cannot be reassigned.
        birthday = "01.01.2000"
        # error, can't reassign the constant!

3. Data Types

    > JavaScript is dynamically typed.
        let message = "hello";  # string
        message = 123;          # number

    <Number>
    > number type represents both integer and float.
    > some special numeric values: Infinity, -Infinity and NaN.
        alert(1/0);         # Infinity
        alert(Infinity);    # Infinity
    > NaN represents a computational error. It is a result of an incorrect or an undefined operation.
        alert("asdf"/2);    # NaN, such division is erroneous
        alert(NaN+1);       # NaN

    <BigInt>
    > JS number type cannot safely represent integer values larger than
        ((2^53)-1) or smaller than -((2^53)-1).
    > A BigInt type was introduced relatively recently to represent longer integers.
    > A BigInt value is created by appending n to the end of an integer
        const bigInt = 123214214214214329953928493753295893285n;

    <String>
    > Strings in JS must be surrounded by quotes.
        let str = "Hello";
        let str2 = 'Yerrr';

    > Double quotes(") and Single quotes(') are used for normal strings.
    > Backticks(`) are extended functionality quotes. eg. embedding variables
        let name = "John";
        alert(`My name is ${name}!`); # My name is John
        alert(`the result is ${1+1}`); # the result is 2

    <Boolean>
    > Boolean values can come as a result of comparisons
        let isGreater = 4 > 1;
        alert(isGreater); # true

    <null>
    > null value does not belong to any of the types above.
    > In JS, null is a special value which represents "nothing", or "empty"

    <undefined>
    > undefined is also a type of its own, just like null.
    > the meaning of undefined is "value is not assigned".
        let age;
        alert(age); # shows "undefined"
    
    <typeof>
    > typeof operator returns the type of the operand.
        typeof undefinted   # "undefined"
        typeof 0            # "number"
        typeof 10n          # "BigInt"
        typeof true         # "boolean"
        typeof "asdf"       # "string"

4. Interaction: alert, prompt, confirm

    > alert shows a message and waits for the user to press OK.
        alert(text);

    > prompt accepts two arguments: title and default value for the input
        prompt(title, [default]); # square bracket around a argument denotes that it is optional.

        1. title is the text to show the user.
        2. default is an optional parameter which is a default value of the input.

        let name = prompt("What is your name?", "Your Name")

    > confirm shows a modal window with a question and two buttons: OK and Cancel.
        The result is true if OK is pressed, and false otherwise.

        let over18 = confirm("Are you over 18?")

5. Type Conversions

    > String conversion
        String(value) will convert value to a string.
        
        let value = true;
        alert(typeof value); # boolean

        value = String(value);
        alert(typeof value); # string

    > Numeric conversion
        Numeric conversion in mathematical functions and expressions happens automatically.
        e.g. alert("6"/"2"); # 3, strings are converted to numbers automatically.

        Number(value) will convert value to a number.
        
        let str = "123";
        alert(typeof str); # string

        let num = Number(str);
        alert(typeof num); # number

        If the string is not a valid number, the result of such conversion is NaN.

        let num = Number("asdf");
        alert(num); # NaN, conversion failed

        Numeric conversion rules:
            undefined       NaN
            null            0
            true and false  1 and 0
            string          whitespaces from start and end are removed. If the remaining string is empty, it returns 0. An error gives NaN.

    > Boolean conversion
        Boolean(1); # true
        Boolean(0); # false

        Boolean("asdf"); # true
        Boolean(""); # false

6. Basic operations

    > Remainder %
        The result of a % b is the remainder of the integer division of a by b.

        alert(5 % 2); # 1
        alert(8 % 3); # 2

    > Exponentiation **
        a ** b = a to the power of be

        alert(2 ** 2); # 4
        alert(2 ** 3); # 8

    > String concatenation with +
        When + is applied to strings, it concatenates them:
            let str = "Chan" + "Kim";
            alert(str); # ChanKim

        Note that if any of the operands is a string, then the other one is converted to a string.
            alert('1' + 2); # '12'

        Here's another example:
            alert(2 + 2 + '1'); # '41' not '221'
            alert('2' + 2 + 1); # '221' not '23'

        binary + is the only operator that works with string in such a way.
        other arithmetic operators work only with numbers and will convert strings to numbers.
            alert(6 - '2'); # 4, converts '2' to a number
            alert('6' / '2'); # 3, converts both to numbers

    > Numeric conversion with unary +
        The unary + operator doesn't do anything to numbers.
        But applied to any other types, it converts them to a number.
            let x = 1;
            alert(+x); # 1

            let x = -2;
            alert(+x); # -2

            alert(+true); # 1
            alert(+""); # 0

    > Operator precedence
        If an expression has more than one operator, the execution order depends on their precedence.
        (default priority order of operators)

        The precedence we all learn from school:
        1 + 2 * 2: we know multiplication is calculated first then comes plus.

        One thing to remember is that unary operators are higher than corresponding binary ones.

        alert(+"3" + +true); # since the unary + has higher precedence, 4

    > Assignment
        Note that = is also an operator (with low precedence, that's why all calculations are first)

        The fact of = being an operator, has an interesting implication.

        The call x = value writes the value into x and then returns it!

        let a = 1;
        let b = 2;
        let c = 3 - (a = b + 1);
        alert(a); # 3
        alert(c); # 0

        in the third line, a = b + 1 not only assign b+1 to a, but also returns the value of a.
            > c = 3 - (a = b + 1);
            > c = 3 - (a = 3);
            > c = 3 - (3);
            > c = 0;

        Another interesting usage, called Chaining assignments:

        let a, b, c;

        a = b = c = 4;
        
        alert(a); # 4
        alert(b); # 4
        alert(c); # 4

    > Shorten expressions
        let n = 2;
        n += 5; # n = 7

        let x = 2;
        x *= 3 + 5; # right part evaluated first, same as n *= 8

        let counter = 2;
        counter++;
        alert(count); # 3

        counter--;
        alert(count); # 2

        counter++: postfix form
        ++counter: prefix form

        both do the same thing: increase counter by 1
        BUT they return different things

        counter++ returns the value before the increment
        ++counter returns the value after the increment

        let counter = 1;
        let a = counter++;
        alert(a); # 1

        let counter = 1;
        let a = ++counter;
        alert(a); # 2

    > Comma
        the comma operator allows us to evaluate several expressions, dividing them with comma.
        Each of them is evaluated in order, but only the result of the last one is returned.

        let a = (1+2, 3+4);

        alert(a); # 7, as it only returns the last one.

7. Comparisons
    > Basics
        Greater/less than: a > b, a < b.
        Greater/less than or equals: a >= b, a <= b.
        Equals: a == b, '==' is comparing, while '=' is assigning.
        Not equals: a != b.
        
    > Result of a comparison is a boolean.
        alert(2 > 1); # true
        alert(2 == 1); # false
        alert(2 != 1); # true

    > String comparison
        alert('Z' > 'A'); # true
        alert('Glow' > 'Glee'); # true
        alert('Bee' > 'Be'); # true
    
        The algorithm to compare two strings:
        1. Compare the first character of both strings.
        2. If the first character from the first string is greater or less,
            then the first string is greater or less than the second.
        3. Otherwise, if both strings' first characters are the same, compare the second the same way.
        4. Repeat until the end of the strings.
        5. If both strings end at the same length, then they are equal.
            Otherwise, the longer string is greater.

    > Comparison of different types
        When comparing values of different types, JS converts the values to numbers.
        alert('2' > 1); // true, '2' converted to number
        alert('01' == 1)l // true, '01' converted to number

        For boolean values, true becomes 1, and false becomes 0.

    > Strict equality
        A strict equality operator === checks the equality without type conversion.

        alert(0 == false); // true, false is converted to 0
        alert(0 === false); // false, no type conversion

    > Comparison of null and undefined
        alert(null == undefined); // true, special rule that they equal each other
        alert(null === undefined); // false

    > How to avoid problems
        Be careful with comparing with undefined/null
        Don't use comparisons > < >= <= with a variable that may be null/undefined.

8. Conditional Branching
>   > if statement
        if (condition) execution;
        if (condition) {
            execution;
        } else if (condition) {
            execution;
        } else {
            execution;
        }
    
    > ? operand
        see below block of code:
            let accessRight;
            let age = prompt("What's your age?", '');

            if (age > 18) {
                accessRight = true;
            } else {
                accessRight = false;
            }

        it can be written as:
            let accessRight = (age > 18) ? true : false;

        (condition) ? execution when true : execution when false
    
9. Logical operators   
    
    > || is an OR operator

        let result = value1 || value2 || value3;

    > || will evaluate the expression from left to right, and if the value1 is true, the value1 is return in its original form.
            if not true, then it will move on to value2, and if it's true, that's what returned.
            if none of the values are true, the last value is going to be the one returned.

    > && is an AND operator

        let result = value1 && value2 && value3;

    > && will evaluate the expression from left to right, and returns the first falsy value, or if none found, return the last value.

    > ! is a NOT operator. It does the following:
        1. Converts the operand to boolean type.
        2. Returns the inversed value.

10. Operator ??

    > The result of a ?? b is, if a is defined, then a. Otherwise, it's b.

    > We can rewrite result = a ?? b like below.
        result = (a !== null && a !== undefined) ? a : b;

    > Use cases
        let user;
        alert(user ?? "Anonymous"); # Anonymous since user is undefined
        user = "John";
        alert(user ?? "Anonymous"); # John since user is defined

    > It's forbidden to use it with || or && without explicit parentheses.

11. Loops: while and for

    > While loop
        curly braces are not required; so you can do
            while (i) alert(i--);

        do...while loop is the same as while loop but the action comes before.
        the body will be executed once no matter what.

    > For loop
        for (begin; condition; step) {
            // loop body
        }

        for (let i=0; i < 3; i++) {
            alert(i);
        }

        Any part of for loop arguments can be skipped.
        let i = 0;
        for (; i<3; i++) {
            ...
        }

        for (; i<3;) {
            i++;
        }

        for (;;) {
            #infinite loop
        }

    > Breaking the loop
        1. break
        while (~) {
            if (~) break;
        }

        when the condition is met, the loop will stop.

        2. continue
        for (let i=0; i<10; i++) {
            if (i%2 == 0) continue;

            alert(i);
        }

        continue skips the current iteration and continue the loop
        this will print only odd numbers