Things to learn in advance
- HTML: the object that javascript directly controls
- CSS

Things that JS can do:
- webpage scripting: DOM (to look up)
- server side scripting: node.js
- Adobe PDF ???
- Unity Game Engine

Javascript is made to dynamically control html and css.

You can also run JS scripts from developer tools in Chrome in Console tab

Calculations

Math.pow(3,2); is 3 with power of 2 which is 9
Math.round(10.6); is 11 which is 10.6 rounded
Math.ceil(10.2); is 11 which is 10.2 rounded up
Math.floor(10.7); is 10 which is 10.7 rounded down
Math.sqrt(9); is 3 which is square root of 9
Math.random(); returns random number between 0 and 1.0

typeof x return type of x

to include reverse comma in a string, use escape
'she's cute' (x)
'she\'s cute' (O)

"hello world".length return length of "hello world" which is 11

The difference between == and ===

alert(1 == '1')     // true
alert(1 === '1')    // false

== returns true for same value different type
=== returns true only for same value same type

if () {
    a
} else if () {
    b
} else {
    c
}

&& and ||

&& = and
|| = or
! = not

true and false are booleans but there are alternative to booleans.

if (1) // true
if (0) // false
if ('') // false
if (undefined) // false
var a;
if (a) // false
if (null) // false
if (NaN) // false


Loops

while (condition) {
    code to run over and over
}

for (initialising, condition, execution) {
    code to run over and over
}

break = stop the loop
continue = continue the loop (immediately) (code below continue is skipped)

Functions

Syntax:

function Name(arguments, ...) {
    body
    return outcome
}

Example:
function numbering() {
    i = 0;
    while (i < 10) {
        document.write(i);
        i++;
    }
}
numbering();

**important: another way to write function

var numbering = function () {
    i = 0;
    while (i < 10) {
        document.write(i);
        i++;
    }
}

Array

Syntax

var colours = ['Red', 'Blue', 'Black']
colours[0] // Red

colours.length // 3

Adding elements:

colours.push('Green') // colours = ['Red', 'Blue', 'Black', 'Green']

colours.unshift('Green') // colours = ['Green', 'Red', 'Blue', 'Black']

colours.concat(['Green', 'White']) // colours = ['Red', 'Blue', 'Black', 'Green', 'White']

colours.splice(2, 1, "Green") // colours = ['Red', 'Blue', 'Green'] (insert at position 2, erase 1 afterwards, input)

Removing elements:

colours.shift(); // remove the first element of an array; colours = ['Blue', 'Black']

colours.pop(); // remove the last element of an array; colours = ['Red', 'Blue']

Ordering:

colours.sort(); // sort the element with adequate order; colours = ['Black', 'Blue', 'Red']

colours.reverse(); // sort the element in reverse order; colours = ['Black', 'Blue', 'Red']

Dictionary

How to create one:
var grades = {'Adam': 10, 'Ben': 6, 'Conor': 80};

Adam is key, 10 is value.

Another way to create dictionary:
var grades = {};
grades['Adam'] = 10;
grades['Ben'] = 6;
grades['Conor'] = 80;

var grades = new Object();
grades['Adam'] = 10;
grades['Ben'] = 6;
grades['Conor'] = 80;

How to fetch info from dictionaries:
grades['Adam'] will return 10
grades.Adam will return 10 as well

Dictionaries in Loops

var numbers = {'griezmann': 7, 'correa': 10, 'oblak': 13}

for (key in numbers) {
    document.write("key: " + key + ", value: " + numbers[key] + "<br />");
}

results:
key: griezmann, value: 7
key: correa, value: 10
key: oblak, value: 13

How to use dictionary to use JS in object oriented way:

var numbers = {
    'list': {'griezmann': 7, 'correa': 10, 'oblak': 13},
    'show': function () {
        for (var name in this.list) {
            document.write(name + ': ' + this.list[name] + <br />);
        }
    }
}

numbers.show();

Scope

var variable_name = "asdf"; // local variable
variable_name = "asdf";     // global variable

Examples

var new_player = "le_normand";

function new_transfer() {
    var new_player = "dovbyk";
}

new_transfer();
document.write(new_player);

// outcome is "le_normand" because atletico signed le_normand but not dovbyk, but also because the local variable declared inside the function is only effective inside the function

What if the variable inside the function is declared without the 'var'?

var new_player = "le_normand";

function new_transfer() {
    new_player = "dovbyk";
}

new_transfer();
document.write(new_player);

// outcome is "dovbyk", when clearly the deal has failed and dovbyk is likely to sign for Roma. It's because without 'var' keyword, variables are regarded as global variable.
// global variables has to be used carefully, since it can cause complication. Use only when you fully understand what you are doing!

more Examples

// "var" in JS only provides scope for functions. This is different from other languages where usually it's provided for inside brackets or indentations, not only functions.

for(var i = 0; i < 1; i++) {
    var name = "hello";
}
alert(name);

// above codes prints "hello", which shows the local variables are only applied to functions.

for(int i = 0; i < 1; i++) {
    String name = "hello";
}
System.out.println(name);

// above code snippet is java equipvalent of the previous one. Java won't allow it, since local variable is declared inside for loop, but it's calling name outside of the loop.