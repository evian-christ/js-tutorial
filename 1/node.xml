<?xml version="1.0" encoding="UTF-8"?>
<cherrytree>
  <node unique_id="1" master_id="0" name="notes" prog_lang="plain-text" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1723472130" ts_lastsave="1723472130">
    <rich_text>Things to learn in advance&#13;
- HTML: the object that javascript directly controls&#13;
- CSS&#13;
&#13;
Things that JS can do:&#13;
- webpage scripting: DOM (to look up)&#13;
- server side scripting: node.js&#13;
- Adobe PDF ???&#13;
- Unity Game Engine&#13;
&#13;
Javascript is made to dynamically control html and css.&#13;
&#13;
You can also run JS scripts from developer tools in Chrome in Console tab&#13;
&#13;
Calculations&#13;
&#13;
Math.pow(3,2); is 3 with power of 2 which is 9&#13;
Math.round(10.6); is 11 which is 10.6 rounded&#13;
Math.ceil(10.2); is 11 which is 10.2 rounded up&#13;
Math.floor(10.7); is 10 which is 10.7 rounded down&#13;
Math.sqrt(9); is 3 which is square root of 9&#13;
Math.random(); returns random number between 0 and 1.0&#13;
&#13;
typeof x return type of x&#13;
&#13;
to include reverse comma in a string, use escape&#13;
'she's cute' (x)&#13;
'she\'s cute' (O)&#13;
&#13;
"hello world".length return length of "hello world" which is 11&#13;
&#13;
The difference between == and ===&#13;
&#13;
alert(1 == '1')     // true&#13;
alert(1 === '1')    // false&#13;
&#13;
== returns true for same value different type&#13;
=== returns true only for same value same type&#13;
&#13;
if () {&#13;
    a&#13;
} else if () {&#13;
    b&#13;
} else {&#13;
    c&#13;
}&#13;
&#13;
&amp;&amp; and ||&#13;
&#13;
&amp;&amp; = and&#13;
|| = or&#13;
! = not&#13;
&#13;
true and false are booleans but there are alternative to booleans.&#13;
&#13;
if (1) // true&#13;
if (0) // false&#13;
if ('') // false&#13;
if (undefined) // false&#13;
var a;&#13;
if (a) // false&#13;
if (null) // false&#13;
if (NaN) // false&#13;
&#13;
&#13;
Loops&#13;
&#13;
while (condition) {&#13;
    code to run over and over&#13;
}&#13;
&#13;
for (initialising, condition, execution) {&#13;
    code to run over and over&#13;
}&#13;
&#13;
break = stop the loop&#13;
continue = continue the loop (immediately) (code below continue is skipped)&#13;
&#13;
Functions&#13;
&#13;
Syntax:&#13;
&#13;
function Name(arguments, ...) {&#13;
    body&#13;
    return outcome&#13;
}&#13;
&#13;
Example:&#13;
function numbering() {&#13;
    i = 0;&#13;
    while (i &lt; 10) {&#13;
        document.write(i);&#13;
        i++;&#13;
    }&#13;
}&#13;
numbering();&#13;
&#13;
**important: another way to write function&#13;
&#13;
var numbering = function () {&#13;
    i = 0;&#13;
    while (i &lt; 10) {&#13;
        document.write(i);&#13;
        i++;&#13;
    }&#13;
}&#13;
&#13;
Array&#13;
&#13;
Syntax&#13;
&#13;
var colours = ['Red', 'Blue', 'Black']&#13;
colours[0] // Red&#13;
&#13;
colours.length // 3&#13;
&#13;
Adding elements:&#13;
&#13;
colours.push('Green') // colours = ['Red', 'Blue', 'Black', 'Green']&#13;
&#13;
colours.unshift('Green') // colours = ['Green', 'Red', 'Blue', 'Black']&#13;
&#13;
colours.concat(['Green', 'White']) // colours = ['Red', 'Blue', 'Black', 'Green', 'White']&#13;
&#13;
colours.splice(2, 1, "Green") // colours = ['Red', 'Blue', 'Green'] (insert at position 2, erase 1 afterwards, input)&#13;
&#13;
Removing elements:&#13;
&#13;
colours.shift(); // remove the first element of an array; colours = ['Blue', 'Black']&#13;
&#13;
colours.pop(); // remove the last element of an array; colours = ['Red', 'Blue']&#13;
&#13;
Ordering:&#13;
&#13;
colours.sort(); // sort the element with adequate order; colours = ['Black', 'Blue', 'Red']&#13;
&#13;
colours.reverse(); // sort the element in reverse order; colours = ['Black', 'Blue', 'Red']&#13;
&#13;
Dictionary&#13;
&#13;
How to create one:&#13;
var grades = {'Adam': 10, 'Ben': 6, 'Conor': 80};&#13;
&#13;
Adam is key, 10 is value.&#13;
&#13;
Another way to create dictionary:&#13;
var grades = {};&#13;
grades['Adam'] = 10;&#13;
grades['Ben'] = 6;&#13;
grades['Conor'] = 80;&#13;
&#13;
var grades = new Object();&#13;
grades['Adam'] = 10;&#13;
grades['Ben'] = 6;&#13;
grades['Conor'] = 80;&#13;
&#13;
How to fetch info from dictionaries:&#13;
grades['Adam'] will return 10&#13;
grades.Adam will return 10 as well&#13;
&#13;
Dictionaries in Loops&#13;
&#13;
var numbers = {'griezmann': 7, 'correa': 10, 'oblak': 13}&#13;
&#13;
for (key in numbers) {&#13;
    document.write("key: " + key + ", value: " + numbers[key] + "&lt;br /&gt;");&#13;
}&#13;
&#13;
results:&#13;
key: griezmann, value: 7&#13;
key: correa, value: 10&#13;
key: oblak, value: 13&#13;
&#13;
How to use dictionary to use JS in object oriented way:&#13;
&#13;
var numbers = {&#13;
    'list': {'griezmann': 7, 'correa': 10, 'oblak': 13},&#13;
    'show': function () {&#13;
        for (var name in this.list) {&#13;
            document.write(name + ': ' + this.list[name] + &lt;br /&gt;);&#13;
        }&#13;
    }&#13;
}&#13;
&#13;
numbers.show();&#13;
&#13;
Scope&#13;
&#13;
var variable_name = "asdf"; // local variable&#13;
variable_name = "asdf";     // global variable&#13;
&#13;
Examples&#13;
&#13;
var new_player = "le_normand";&#13;
&#13;
function new_transfer() {&#13;
    var new_player = "dovbyk";&#13;
}&#13;
&#13;
new_transfer();&#13;
document.write(new_player);&#13;
&#13;
// outcome is "le_normand" because atletico signed le_normand but not dovbyk, but also because the local variable declared inside the function is only effective inside the function&#13;
&#13;
What if the variable inside the function is declared without the 'var'?&#13;
&#13;
var new_player = "le_normand";&#13;
&#13;
function new_transfer() {&#13;
    new_player = "dovbyk";&#13;
}&#13;
&#13;
new_transfer();&#13;
document.write(new_player);&#13;
&#13;
// outcome is "dovbyk", when clearly the deal has failed and dovbyk is likely to sign for Roma. It's because without 'var' keyword, variables are regarded as global variable.&#13;
// global variables has to be used carefully, since it can cause complication. Use only when you fully understand what you are doing!&#13;
&#13;
more Examples&#13;
&#13;
// "var" in JS only provides scope for functions. This is different from other languages where usually it's provided for inside brackets or indentations, not only functions.&#13;
&#13;
for(var i = 0; i &lt; 1; i++) {&#13;
    var name = "hello";&#13;
}&#13;
alert(name);&#13;
&#13;
// above codes prints "hello", which shows the local variables are only applied to functions.&#13;
&#13;
for(int i = 0; i &lt; 1; i++) {&#13;
    String name = "hello";&#13;
}&#13;
System.out.println(name);&#13;
&#13;
// above code snippet is java equipvalent of the previous one. Java won't allow it, since local variable is declared inside for loop, but it's calling name outside of the loop.&#13;
&#13;
Static Scoping:&#13;
&#13;
// JS scopes are based on the time when it's complied. Below is the example.&#13;
&#13;
var i = 5;&#13;
&#13;
function a() {&#13;
    var i = 10;&#13;
    b();&#13;
}&#13;
&#13;
function b() {&#13;
    alert(i);&#13;
}&#13;
&#13;
a();</rich_text>
  </node>
</cherrytree>
